{"version":3,"sources":["../src/node/cli.ts","../src/node/server/index.ts","../src/node/optimizer/index.ts","../src/node/constants.ts","../src/node/optimizer/scanPlugin.ts","../src/node/optimizer/preBundlePlugin.ts","../src/node/utils.ts","../src/node/plugins/esbuild.ts","../src/node/plugins/importAnalysis.ts","../src/node/plugins/resolve.ts","../src/node/plugins/css.ts","../src/node/plugins/assets.ts","../src/node/plugins/clientInject.ts","../src/node/plugins/index.ts","../src/node/pluginContainer.ts","../src/node/server/middlewares/indexHtml.ts","../src/node/server/middlewares/transform.ts","../src/node/server/middlewares/static.ts","../src/node/moduleGraph.ts","../src/node/ws.ts","../src/node/hmr.ts"],"sourcesContent":["// 初始化 cli\r\n\r\nimport cac from \"cac\";\r\nimport { startDevServer } from './server'\r\n\r\nconst cli = cac()\r\n\r\ncli\r\n  .command(\"[root]\", \"Run the development server\")\r\n  .alias(\"server\")\r\n  .alias(\"dev\")\r\n  .action(async () => {\r\n    await startDevServer()\r\n  })\r\n\r\ncli.help()\r\n\r\ncli.parse()\r\n","import connect from 'connect'\r\n\r\nimport { blue, green } from 'picocolors'\r\n\r\nimport { optimize } from '../optimizer'\r\nimport { resolvePlugins } from '../plugins'\r\nimport { createPluginContainer, PluginContainer } from '../pluginContainer'\r\nimport { Plugin } from '../plugin'\r\nimport { IndexHtmlMiddleware } from './middlewares/indexHtml'\r\nimport { transformMiddleware } from './middlewares/transform'\r\nimport { staticMiddleware } from './middlewares/static'\r\nimport { ModuleGraph } from '../moduleGraph'\r\nimport chokidar, { FSWatcher } from 'chokidar'\r\nimport { createWebSocketServer } from '../ws'\r\nimport {bindingHMREvents} from '../hmr'\r\nimport {normalizePath} from '../utils'\r\n\r\nexport interface ServerContext {\r\n  root: string\r\n  pluginContainer: PluginContainer\r\n  app: connect.Server\r\n  plugins: Plugin[]\r\n  moduleGraph: ModuleGraph,\r\n  ws: {\r\n    send: (data: any) => void\r\n    close: () => void\r\n  },\r\n  watcher: FSWatcher\r\n}\r\n\r\nexport async function startDevServer() {\r\n  const app = connect()\r\n  const ws = createWebSocketServer(app)\r\n  const root = process.cwd()\r\n  console.log(blue(`Serving ${root}`))\r\n  const startTime = Date.now()\r\n  const plugins = resolvePlugins()\r\n  const pluginContainer = createPluginContainer(plugins)\r\n  const moduleGraph = new ModuleGraph((url) => pluginContainer.resolveId(url))\r\n  const watcher = chokidar.watch(root, {\r\n    ignored: [\"**/node_modules/**\", \"**/.git/**\"],\r\n    ignoreInitial: true,\r\n  })  \r\n  const serverContext: ServerContext = {\r\n    root: normalizePath(process.cwd()),\r\n    app,\r\n    pluginContainer,\r\n    plugins,\r\n    moduleGraph,\r\n    ws,\r\n    watcher\r\n  }\r\n\r\n  bindingHMREvents(serverContext)\r\n\r\n  for (const plugin of plugins) {\r\n    if (plugin.configureServer) {\r\n      await plugin.configureServer(serverContext)\r\n    }\r\n  }\r\n  // 核心编译\r\n  app.use(transformMiddleware(serverContext))\r\n  // 入口 html 编译\r\n  app.use(IndexHtmlMiddleware(serverContext))\r\n  // 静态文件的处理\r\n  app.use(staticMiddleware(serverContext.root))\r\n  app.listen(3000, async () => {\r\n    await optimize(root) // 预构建\r\n    console.log(green(`Server started in ${Date.now() - startTime}ms`))\r\n    console.log(blue(`Server running at http://localhost:3000`))\r\n  })\r\n}\r\n","// 完成预构建\r\nimport path from 'path'\r\nimport { build } from 'esbuild'\r\nimport { green } from 'picocolors'\r\nimport { scanPlugin } from './scanPlugin'\r\nimport { PRE_BUNDLE_DIR } from '../constants'\r\nimport {preBundlePlugin} from './preBundlePlugin'\r\n\r\nexport async function optimize(root: string) {\r\n  /**\r\n   * 1. 确定入口文件\r\n   * 2. 从入口处扫描依赖项\r\n   * 3. 预构建依赖\r\n   */\r\n  console.log('蛙叫你预构建！！！')\r\n  // 1.\r\n  const entry = path.resolve(root, 'src/main.tsx')\r\n  // 2.\r\n  const deps = new Set<string>()\r\n  await build({\r\n    entryPoints: [entry],\r\n    bundle: true,\r\n    write: false,\r\n    plugins: [scanPlugin(deps)],\r\n  })\r\n  console.log(\r\n    `${green('需要预构建的依赖')}:\\n${[...deps]\r\n      .map(green)\r\n      .map((item) => `  ${item}`)\r\n      .join('\\n')}`,\r\n  )\r\n  /**\r\n   * 3.\r\n   * 3.1 将代码格式转化为 esm\r\n   * 3.2 将依赖项中的依赖合并在一起，减少 http 请求\r\n   */\r\n  await build({\r\n    entryPoints: [...deps],\r\n    bundle: true,\r\n    write: true,\r\n    format: 'esm',\r\n    splitting: true,\r\n    outdir: path.resolve(root, PRE_BUNDLE_DIR),\r\n    plugins: [preBundlePlugin(deps)],\r\n  })\r\n\r\n}\r\n","import path from \"path\";\r\n\r\nexport const EXTERNAL_TYPES = [\r\n  \"css\",\r\n  \"less\",\r\n  \"sass\",\r\n  \"scss\",\r\n  \"styl\",\r\n  \"stylus\",\r\n  \"pcss\",\r\n  \"postcss\",\r\n  \"vue\",\r\n  \"svelte\",\r\n  \"marko\",\r\n  \"astro\",\r\n  \"png\",\r\n  \"jpe?g\",\r\n  \"gif\",\r\n  \"svg\",\r\n  \"ico\",\r\n  \"webp\",\r\n  \"avif\",\r\n];\r\n\r\nexport const PRE_BUNDLE_DIR = path.join(\"node_modules\", \".m-vite\");\r\n\r\n\r\nexport const BARE_IMPORT_RE = /^[\\w@][^:]/;\r\n\r\nexport const JS_TYPES_RE = /\\.(?:j|t)sx?$|\\.mjs$/;\r\nexport const QEURY_RE = /\\?.*$/s;\r\nexport const HASH_RE = /#.*$/s;\r\nexport const DEFAULT_EXTENSIONS = [\".tsx\", \".ts\", \".jsx\", \"js\"];\r\n\r\nexport const HMR_PORT = 24678;\r\n\r\nexport const CLIENT_PUBLIC_PATH = \"/@vite/client\";\r\n\r\nexport const INTERNAL_LIST = [CLIENT_PUBLIC_PATH, \"/@react-refresh\"];","// 扫描依赖项\r\nimport { Plugin } from 'esbuild'\r\nimport { BARE_IMPORT_RE, EXTERNAL_TYPES } from '../constants'\r\n\r\nexport function scanPlugin(deps: Set<string>): Plugin {\r\n  return {\r\n    name: 'scan-plugin',\r\n    setup(build) {\r\n      // 忽略文件夹的类型\r\n      build.onResolve(\r\n        { filter: new RegExp(`\\\\.(${EXTERNAL_TYPES.join(\"|\")})$`) },\r\n        (resolveInfo) => {\r\n          return {\r\n            path: resolveInfo.path,\r\n            external: true,\r\n          }\r\n        }\r\n      ),\r\n      // 记录依赖项\r\n      build.onResolve(\r\n        {filter: BARE_IMPORT_RE}, // 裸导入\r\n        (resolveInfo) => {\r\n          const { path: id } = resolveInfo\r\n          deps.add(id)\r\n          return {\r\n            path: id,\r\n            external: true,\r\n          }\r\n        }\r\n      ) \r\n    }\r\n  }\r\n}","import { Loader, Plugin } from \"esbuild\";\r\nimport { BARE_IMPORT_RE } from \"../constants\";\r\n// 用来分析 es 模块 import/export 语句的库\r\nimport { init, parse } from \"es-module-lexer\";\r\nimport path from \"path\";\r\n// 一个实现了 node 路径解析算法的库\r\nimport resolve from \"resolve\";\r\n// 一个更加好用的文件操作库\r\nimport fs from \"fs-extra\";\r\n// 用来开发打印 debug 日志的库\r\nimport createDebug from \"debug\";\r\nimport { normalizePath } from \"../utils\";\r\n\r\nconst debug = createDebug(\"dev\");\r\n\r\n\r\n\r\nexport function preBundlePlugin(deps: Set<string>): Plugin {\r\n  return {\r\n    name: \"esbuild:pre-bundle\",\r\n    setup(build) {\r\n      build.onResolve(\r\n        {\r\n          filter: BARE_IMPORT_RE,\r\n        },\r\n        (resolveInfo) => {\r\n          const { path: id, importer } = resolveInfo\r\n          const isEntry = !importer\r\n          // 命中需要预编译的依赖\r\n          if (deps.has(id)) {\r\n            // 若为入口，则标记 dep 的 \r\n            // if(isEntry) {\r\n            //   console.log('标记', id)\r\n            // } else {\r\n            //   console.log('未标记', resolve.sync(id, {basedir: process.cwd()}))\r\n            // }\r\n            return isEntry\r\n              ? {\r\n                  path: id,\r\n                  namespace: \"dep\",\r\n                }\r\n              : {\r\n                  // 因为走到 onResolve 了，所以这里的 path 就是绝对路径了\r\n                  path: resolve.sync(id, { basedir: process.cwd() }),\r\n                }\r\n          }\r\n        }\r\n      )\r\n\r\n      // 拿到标记后的依赖，构造代理模块，交给 esbuild 打包\r\n      build.onLoad(\r\n        {\r\n          filter: /.*/,\r\n          namespace: \"dep\",\r\n        },\r\n        async (loadInfo) => {\r\n          await init\r\n          \r\n          const id = loadInfo.path\r\n          const root = process.cwd()\r\n\r\n          const entryPath = resolve.sync(id, { basedir: root })\r\n          const code = await fs.readFile(entryPath, \"utf-8\")\r\n          const [imports, exports] = await parse(code)\r\n          let relativePath = normalizePath(path.relative(root, entryPath))\r\n          console.log('relativePath', relativePath)\r\n          if (\r\n            !relativePath.startsWith('./') &&\r\n            !relativePath.startsWith('../') &&\r\n            relativePath !== '.'\r\n          ) {\r\n            relativePath = `./${relativePath}`\r\n          }\r\n          // console.log('after relativePath', relativePath)\r\n          let proxyModule = []\r\n\r\n          // cjs\r\n          if (!imports.length && !exports.length) {\r\n            // 构造代理模块\r\n            const res = require(entryPath)\r\n            const specifiers = Object.keys(res)\r\n            proxyModule.push(\r\n              `export { ${specifiers.join(\",\")} } from \"${relativePath}\"`,\r\n              `export default require(\"${relativePath}\")`\r\n            )\r\n          } else {\r\n            // esm 格式比较好处理，export * 或者 export default 即可\r\n            if ((exports as any).includes(\"default\")) {\r\n              proxyModule.push(`import d from \"${relativePath}\";export default d`)\r\n            }\r\n            proxyModule.push(`export * from \"${relativePath}\"`)\r\n          }\r\n          debug(\"代理模块内容: %o\", proxyModule.join(\"\\n\"))\r\n          const loader = path.extname(entryPath).slice(1)\r\n          return {\r\n            loader: loader as Loader,\r\n            contents: proxyModule.join(\"\\n\"),\r\n            resolveDir: root,\r\n          }\r\n        }\r\n      )\r\n    }\r\n  }\r\n}","// src/node/utils.ts\r\nimport os from 'os'\r\nimport path from 'path'\r\nimport { HASH_RE, JS_TYPES_RE, QEURY_RE,INTERNAL_LIST } from './constants'\r\n\r\nexport function slash(p: string): string {\r\n  return p.replace(/\\\\/g, '/')\r\n}\r\n\r\nexport const isWindows = os.platform() === 'win32'\r\n\r\nexport function normalizePath(id: string): string {\r\n  return path.posix.normalize(isWindows ? slash(id) : id)\r\n}\r\n\r\nexport const isJSRequest = (id: string): boolean => {\r\n  id = cleanUrl(id)\r\n  if (JS_TYPES_RE.test(id)) {\r\n    return true\r\n  }\r\n  if (!path.extname(id) && !id.endsWith('/')) {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\nexport const cleanUrl = (url: string): string =>\r\n  url.replace(HASH_RE, '').replace(QEURY_RE, '')\r\n\r\nexport function removeImportQuery(url: string): string {\r\n  return url.replace(/\\?import$/, '')\r\n}\r\n\r\n\r\nexport function isInternalRequest(url: string): boolean {\r\n  return INTERNAL_LIST.includes(url);\r\n}\r\n\r\nexport const isCSSRequest = (id: string): boolean =>\r\n  cleanUrl(id).endsWith(\".css\");\r\n\r\n\r\n  export function isImportRequest(url: string): boolean {\r\n    return url.endsWith(\"?import\");\r\n  }\r\n\r\n  export function getShortName(file: string, root: string) {\r\n    return file.startsWith(root + \"/\") ? path.posix.relative(root, file) : file;\r\n  }","// 此插件用于将 JS/TS/JSX/TSX 文件编译为浏览器可识别的代码,核心时使用 esbuild 的 Transform API\r\n\r\nimport {readFile} from 'fs-extra'\r\nimport {Plugin} from '../plugin'\r\nimport {isJSRequest} from '../utils'\r\nimport esbuild from 'esbuild'\r\nimport path from 'path'\r\n\r\n\r\n\r\nexport function esbuildTransformPlugin(): Plugin {\r\n  return {\r\n    name: 'm-vite:esbuild-transform',\r\n    async load(id) {\r\n      if(isJSRequest(id)) {\r\n        try {\r\n          const code = await readFile(id, 'utf-8')\r\n          return code\r\n        } catch (e) {\r\n          console.log('在esbuildTransformPlugin中的load出错',e)\r\n          return null\r\n        }\r\n      }\r\n    },\r\n    async transform(code, id) {\r\n      if(isJSRequest(id)) {\r\n        const extname = path.extname(id).slice(1)\r\n        const {code: transformedCode, map} = await esbuild.transform(code, {\r\n          target: 'esnext',\r\n          format:'esm',\r\n          sourcemap: true,\r\n          loader: extname as \"js\" | \"jsx\" | \"ts\" |\"tsx\",\r\n        })\r\n        return {\r\n          code: transformedCode,\r\n          map,\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n}","import { init, parse } from \"es-module-lexer\";\r\nimport {\r\n  BARE_IMPORT_RE,\r\n  CLIENT_PUBLIC_PATH,\r\n  PRE_BUNDLE_DIR,\r\n} from \"../constants\";\r\nimport {\r\n  cleanUrl,\r\n  getShortName,\r\n  isInternalRequest,\r\n  isJSRequest,\r\n  isWindows,\r\n  normalizePath,\r\n} from \"../utils\";\r\nimport MagicString from \"magic-string\";\r\nimport path from \"path\";\r\nimport { Plugin } from \"../plugin\";\r\nimport { ServerContext } from \"../server/index\";\r\n\r\nexport function importAnalysisPlugin(): Plugin {\r\n  let serverContext: ServerContext;\r\n  return {\r\n    name: \"m-vite:import-analysis\",\r\n    configureServer(s) {\r\n      serverContext = s;\r\n    },\r\n    async transform(code: string, id: string) {\r\n      if (!isJSRequest(id) || isInternalRequest(id)) {\r\n        return null;\r\n      }\r\n      await init;\r\n      const importedModules = new Set<string>();\r\n      const [imports] = parse(code);\r\n      const ms = new MagicString(code);\r\n      const resolve = async (id: string, importer?: string) => {\r\n        const resolved = await serverContext.pluginContainer.resolveId(\r\n          id,\r\n          normalizePath(importer)\r\n        );\r\n        if (!resolved) {\r\n          return;\r\n        }\r\n        const cleanedId = cleanUrl(resolved.id);\r\n        const mod = moduleGraph.getModuleById(cleanedId);\r\n        let resolvedId = `/${getShortName(resolved.id, serverContext.root)}`;\r\n        if (mod && mod.lastHMRTimestamp > 0) {\r\n          resolvedId += \"?t=\" + mod.lastHMRTimestamp;\r\n        }\r\n        return resolvedId;\r\n      };\r\n      const { moduleGraph } = serverContext;\r\n      const curMod = moduleGraph.getModuleById(id)!;\r\n\r\n      for (const importInfo of imports) {\r\n        const { s: modStart, e: modEnd, n: modSource } = importInfo;\r\n        if (!modSource || isInternalRequest(modSource)) continue;\r\n        // 静态资源\r\n        if (modSource.endsWith(\".svg\")) {\r\n          // 加上 ?import 后缀\r\n          const resolvedUrl = await resolve(modSource, id);\r\n          ms.overwrite(modStart, modEnd, `${resolvedUrl}?import`);\r\n          continue;\r\n        }\r\n        // 第三方库: 路径重写到预构建产物的路径\r\n        if (BARE_IMPORT_RE.test(modSource)) {\r\n          const bundlePath = normalizePath(\r\n            path.join('/', PRE_BUNDLE_DIR, `${modSource}.js`)\r\n          );\r\n          ms.overwrite(modStart, modEnd, bundlePath);\r\n          importedModules.add(bundlePath);\r\n        } else if (modSource.startsWith(\".\") || modSource.startsWith(\"/\")) {\r\n          const resolved = await resolve(modSource, id);\r\n          if (resolved) {\r\n            ms.overwrite(modStart, modEnd, resolved);\r\n            importedModules.add(resolved);\r\n          }\r\n        }\r\n      }\r\n      // 只对业务源码注入\r\n      if (!id.includes(\"node_modules\")) {\r\n        // 注入 HMR 相关的工具函数\r\n        ms.prepend(\r\n          `import { createHotContext as __vite__createHotContext } from \"${CLIENT_PUBLIC_PATH}\";` +\r\n            `import.meta.hot = __vite__createHotContext(${JSON.stringify(\r\n              cleanUrl(curMod.url)\r\n            )});`\r\n        );\r\n      }\r\n\r\n      moduleGraph.updateModuleInfo(curMod, importedModules);\r\n\r\n      return {\r\n        code: ms.toString(),\r\n        map: ms.generateMap(),\r\n      };\r\n    },\r\n  };\r\n}\r\n","// 此插件用于解析 import 语句中的路径，准确的找的模块\r\n\r\nimport resolve from 'resolve'\r\nimport { Plugin } from '../plugin'\r\nimport { ServerContext } from '../server'\r\nimport path from 'path'\r\nimport { pathExists } from 'fs-extra'\r\nimport { DEFAULT_EXTENSIONS } from '../constants'\r\nimport { cleanUrl, normalizePath } from '../utils'\r\n\r\nexport function resolvePlugin(): Plugin {\r\n  let serverContext: ServerContext\r\n  return {\r\n    name: 'm-vite:resolve',\r\n    configureServer(_s) {\r\n      serverContext = _s\r\n    },\r\n    async resolveId(id: string, importer?: string) {\r\n      if (path.isAbsolute(id)) {\r\n        // 绝对路径\r\n        if (await pathExists(id)) {\r\n          return { id }\r\n        }\r\n        id = path.join(serverContext.root, id) // 添加 root 前缀\r\n        if(await pathExists(id)) {\r\n          return { id }\r\n        }\r\n      } else if (id.startsWith('.')) {\r\n        if(!importer) {\r\n          throw new Error('importer is required')\r\n        }\r\n        const hasExtension = path.extname(id).length > 1 // 是否有后缀\r\n        let resolveId: string\r\n        // 文件名包含后缀 如 index.js\r\n        if(hasExtension) {\r\n          resolveId = normalizePath(resolve.sync(id, {basedir: path.dirname(importer)}))\r\n          if(await pathExists(resolveId)) {\r\n            return {id: resolveId}\r\n          }\r\n        } else { // 不包含后缀 如 index\r\n          for(const extname of DEFAULT_EXTENSIONS) {\r\n            try {\r\n              const withExtension = `${id}${extname}` // 拼接后缀\r\n              resolveId = normalizePath(resolve.sync(withExtension,{\r\n                basedir: path.dirname(importer)\r\n              }))\r\n              if(await pathExists(resolveId)) {\r\n                return {id: resolveId}\r\n              }\r\n            } catch (error) {\r\n              continue\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return null\r\n    },\r\n  }\r\n}\r\n","import { readFile } from \"fs-extra\";\r\nimport { Plugin } from \"../plugin\";\r\nimport { CLIENT_PUBLIC_PATH } from \"../constants\";\r\nimport { getShortName, normalizePath } from \"../utils\";\r\nimport { ServerContext } from \"../server\";\r\n\r\nexport function cssPlugin(): Plugin {\r\n  let serverContext: ServerContext\r\n  return {\r\n    name: \"m-vite:css\",\r\n    configureServer(_s) {\r\n      serverContext = _s\r\n    },\r\n    load(id) {\r\n      // 加载\r\n      if (id.endsWith(\".css\")) {\r\n        return readFile(id, \"utf-8\");\r\n      }\r\n    },\r\n    // 转换逻辑\r\n    async transform(code, id) {\r\n      if (id.endsWith(\".css\")) {\r\n        \r\n        // 包装成 JS 模块\r\n        const jsContent = `\r\n        import { createHotContext as __vite__createHotContext } from \"${CLIENT_PUBLIC_PATH}\"\r\n        import { updateStyle, removeStyle } from \"${CLIENT_PUBLIC_PATH}\"\r\n        import.meta.hot = __vite__createHotContext(\"/${getShortName(normalizePath(id), serverContext.root)}\")\r\n\r\n        const id = \"${id}\";\r\n        const css = \"${code.replace(/\\r\\n/g, \"\")}\";\r\n        updateStyle(id, css);\r\n        import.meta.hot.accept()\r\n        export default css\r\n        import.meta.hot.prune(() => removeStyle(id))\r\n        `.trim();\r\n        return {\r\n          code: jsContent,\r\n        };\r\n      }\r\n      return null;\r\n    },\r\n  };\r\n}\r\n","import { Plugin } from \"../plugin\"\r\nimport { cleanUrl, removeImportQuery, isWindows } from \"../utils\"\r\n\r\nexport function assetPlugin(): Plugin {\r\n  return {\r\n    name: \"vite:asset\",\r\n    async load(id) {\r\n      let cleanedId = removeImportQuery(cleanUrl(id))\r\n      // 这里仅处理 svg\r\n      if (cleanedId.endsWith(\".svg\")) {\r\n        if (isWindows) {\r\n          cleanedId = cleanedId.replace('E:\\\\', '').replace(/\\\\/g, '\\\\\\\\')\r\n        }\r\n        \r\n        return {\r\n          // 包装成一个 JS 模块\r\n          code: `export default \"${cleanedId}\"`\r\n        }\r\n      }\r\n    }\r\n  }\r\n}","import { CLIENT_PUBLIC_PATH, HMR_PORT } from '../constants'\r\nimport { Plugin } from '../plugin'\r\nimport fs from 'fs-extra'\r\nimport path from 'path'\r\nimport { ServerContext } from '../server'\r\n\r\nexport function clientInjectPlugin(): Plugin {\r\n  let serverContext: ServerContext\r\n  return {\r\n    name: 'm-vite:client-inject',\r\n    configureServer(_s) {\r\n      serverContext = _s\r\n    },\r\n    resolveId(id) {\r\n      if (id === CLIENT_PUBLIC_PATH) {\r\n        return { id }\r\n      }\r\n      return null\r\n    },\r\n    async load(id) {\r\n      // 加载 hmr 脚本\r\n      if (id === CLIENT_PUBLIC_PATH) {\r\n        const realPath = path.join(\r\n          serverContext.root,\r\n          'node_modules',\r\n          'my-vite',\r\n          'dist',\r\n          'client.mjs',\r\n        )\r\n        const code = await fs.readFile(realPath, 'utf-8')\r\n        return {\r\n          code: code.replace('__HMR_PORT__', JSON.stringify(HMR_PORT)),\r\n        }\r\n      }\r\n    },\r\n    transformIndexHtml(raw) {\r\n      // 插入客户端脚本\r\n      return raw.replace(\r\n        /(<head[^>]*>)/i,\r\n        `$1<script type=\"module\" src=\"${CLIENT_PUBLIC_PATH}\"></script>`,\r\n      )\r\n    },\r\n  }\r\n}\r\n","import { Plugin } from '../plugin'\r\nimport { esbuildTransformPlugin } from './esbuild'\r\nimport { importAnalysisPlugin } from './importAnalysis'\r\nimport { resolvePlugin } from './resolve'\r\nimport { cssPlugin } from './css'\r\nimport { assetPlugin } from './assets'\r\nimport { clientInjectPlugin } from './clientInject'\r\n\r\nexport function resolvePlugins(): Plugin[] {\r\n  return [\r\n    clientInjectPlugin(),\r\n    resolvePlugin(),\r\n    esbuildTransformPlugin(),\r\n    importAnalysisPlugin(),\r\n    cssPlugin(),\r\n    assetPlugin()\r\n  ]\r\n  // return []\r\n}\r\n","import {\r\n  LoadResult,\r\n  PartialResolvedId,\r\n  SourceDescription,\r\n  PluginContext as RollupPluginContext,\r\n  ResolvedId,\r\n} from 'rollup'\r\nimport { Plugin } from './plugin'\r\n\r\nexport interface PluginContainer {\r\n  resolveId(id: string, importer?: string): Promise<PartialResolvedId | null>\r\n  load(id: string): Promise<LoadResult | null>\r\n  transform(code: string, id: string): Promise<SourceDescription>\r\n}\r\n\r\n// 模拟 rollup 的插件机制\r\nexport const createPluginContainer = (plugins: Plugin[]): PluginContainer => {\r\n  // @ts-ignore\r\n  class Context implements RollupPluginContext {\r\n    async resolve(id: string, importer?: string) {\r\n      let out = await pluginContainer.resolveId(id, importer)\r\n      if (typeof out === 'string') out = { id: out }\r\n      return null\r\n    }\r\n  }\r\n\r\n  const pluginContainer: PluginContainer = {\r\n    // 依次调用 plugin 的 resolveId 方法，直到有返回值\r\n    async resolveId(id: string, importer?: string) {\r\n      const ctx = new Context() as any\r\n      for (const plugin of plugins) {\r\n        if (plugin.resolveId) {\r\n          const newId = await plugin.resolveId.call(ctx as any, id, importer)\r\n          if(newId) {\r\n            id = typeof newId === 'string' ? newId : newId.id\r\n            return {id}\r\n          }\r\n        }\r\n      }\r\n      return null\r\n    },\r\n    // 依次调用 plugin 的 load 方法，直到有返回值\r\n    async load(id) {\r\n      const ctx = new Context() as any\r\n      for(const plugin of plugins) {\r\n        if(plugin.load) {\r\n          const result = await plugin.load.call(ctx as any, id)\r\n          if(result) {\r\n            return result\r\n          }\r\n        }\r\n      }\r\n    },\r\n    // 依次调用 plugin 的 transform 方法，直到有返回值\r\n    async transform(code, id) {\r\n      const ctx = new Context() as any\r\n      for(const plugin of plugins) {\r\n        if(plugin.transform) {\r\n          const result = await plugin.transform.call(ctx as any, code, id)\r\n          if(!result) continue\r\n          if(typeof result === 'string') {\r\n            code = result\r\n          } else if(result.code) {\r\n            code = result.code\r\n          }\r\n        }\r\n      }\r\n      return {code}\r\n    }\r\n  }\r\n\r\n  return pluginContainer\r\n}\r\n","// 入口 html 的加载\r\nimport {NextHandleFunction} from 'connect'\r\nimport { ServerContext } from '../index'\r\nimport path from 'path'\r\nimport { pathExists, readFile } from 'fs-extra'\r\n\r\nexport function IndexHtmlMiddleware(\r\n  serverContext: ServerContext\r\n): NextHandleFunction {\r\n  return async (req, res, next) => {\r\n    if(req.url === '/') {\r\n      const {root} = serverContext\r\n      const indexHtmlPath = path.join(root, 'index.html')\r\n      if(await pathExists(indexHtmlPath)) {\r\n        const rawHtml = await readFile(indexHtmlPath, 'utf-8')\r\n        let html = rawHtml\r\n        for(const plugin of serverContext.plugins) {\r\n          if(plugin.transformIndexHtml) {\r\n            html = await plugin.transformIndexHtml(html)\r\n          }\r\n        }\r\n        res.statusCode = 200\r\n        res.setHeader('Content-Type', 'text/html')\r\n        return res.end(html)\r\n      }\r\n    }\r\n    return next()\r\n  }\r\n}","\r\n\r\nimport {NextHandleFunction} from 'connect'\r\nimport {\r\n  isJSRequest,\r\n  cleanUrl,\r\n  isCSSRequest,\r\n  isImportRequest\r\n} from '../../utils'\r\n\r\nimport { ServerContext } from '../index'\r\nimport createDebug from 'debug'\r\n\r\n\r\nconst debug = createDebug(\"dev\")\r\n\r\nexport async function transformRequest (\r\n  url: string,\r\n  serverContext: ServerContext\r\n) {\r\n  const { pluginContainer, moduleGraph } = serverContext\r\n  url = cleanUrl(url)\r\n  let mod = await moduleGraph.getModuleByUrl(url)\r\n  if(mod && mod.transformResult) { // 如果已经有了 transformResult，直接返回\r\n    return mod.transformResult\r\n  } \r\n  const resolvedResult = await pluginContainer.resolveId(url)\r\n  let transformResult\r\n  if(resolvedResult?.id) {\r\n    let code = await pluginContainer.load(resolvedResult.id)\r\n    if(typeof code === 'object' && code !== null) {\r\n      code = code.code\r\n    }\r\n    mod = await moduleGraph.ensureEntryFromUrl(url);\r\n    if(code) {\r\n      transformResult = await pluginContainer.transform(code, resolvedResult.id)\r\n    }\r\n  }\r\n  if(mod) {\r\n    mod.transformResult = transformResult\r\n  }\r\n  return transformResult\r\n}\r\n\r\n\r\nexport function transformMiddleware(\r\n  serverContext: ServerContext\r\n): NextHandleFunction {\r\n  return async (req, res, next) => {\r\n    if(req.method !== 'GET' || !req.url) {\r\n      return next()\r\n    }\r\n    const url = req.url\r\n    debug('transformMiddleware: %s', url)\r\n    // 处理 js 请求\r\n    if(isJSRequest(url) || isCSSRequest(url) || isImportRequest(url)) {\r\n      let result: any = await transformRequest(url, serverContext)\r\n      if(!result) {\r\n        return next()\r\n      }\r\n      if(result && typeof result !== 'string') {\r\n        result = result.code\r\n      }\r\n      res.statusCode = 200\r\n      res.setHeader('Content-Type', 'application/javascript')\r\n      return res.end(result)\r\n    }\r\n    return next()\r\n  }\r\n}","import { NextHandleFunction } from 'connect'\r\nimport { isImportRequest } from '../../utils'\r\n\r\n// 一个用于加载静态文件的中间件\r\nimport sirv from 'sirv'\r\n\r\nexport function staticMiddleware(root: string): NextHandleFunction {\r\n  const serveFromRoot = sirv('/', {dev: true})\r\n  return async(req, res, next) => {\r\n    if(!req.url) {\r\n      return\r\n    }\r\n    // 不处理 import 请求\r\n    if(isImportRequest(req.url)) {\r\n      return\r\n    }\r\n    serveFromRoot(req, res, next)\r\n  }\r\n}","import { PartialResolvedId, TransformResult } from 'rollup'\r\nimport { cleanUrl } from './utils'\r\n\r\nexport class ModuleNode {\r\n  url: string;\r\n  id: string | null = null;\r\n  importers = new Set<ModuleNode>(); // 依赖当前模块的模块\r\n  importedModules = new Set<ModuleNode>(); // 当前模块依赖的模块\r\n  transformResult: TransformResult | null = null;\r\n  lastHMRTimestamp = 0;\r\n  constructor(url: string) {\r\n    this.url = url\r\n  }\r\n}\r\n\r\n\r\nexport class ModuleGraph {\r\n  urlToModuleMap = new Map<string, ModuleNode>();\r\n  idToModuleMap = new Map<string, ModuleNode>();\r\n  constructor(\r\n    private resolveId:(url: string) => Promise<PartialResolvedId | null>\r\n  ){}\r\n\r\n  private async _resolve(url: string): Promise<{url: string, resolvedId: string}> {\r\n    const resolved = await this.resolveId(url)\r\n    const resolvedId = resolved?.id || url\r\n    return {\r\n      url,\r\n      resolvedId\r\n    }\r\n  }\r\n\r\n  getModuleById(id: string): ModuleNode | undefined {\r\n    return this.idToModuleMap.get(id)\r\n  }\r\n\r\n  async getModuleByUrl(rawUrl: string): Promise<ModuleNode | undefined> {\r\n    const {url} = await this._resolve(rawUrl)\r\n    return this.urlToModuleMap.get(url)\r\n  }\r\n\r\n  \r\n  async ensureEntryFromUrl(rawUrl: string): Promise<ModuleNode> {\r\n    const {url, resolvedId} = await this._resolve(rawUrl)\r\n    if(this.urlToModuleMap.has(url)) {\r\n      return this.urlToModuleMap.get(url) as ModuleNode\r\n    }\r\n    const mod = new ModuleNode(url)\r\n    mod.id = resolvedId\r\n    this.urlToModuleMap.set(url, mod)\r\n    this.idToModuleMap.set(resolvedId, mod)\r\n    return mod\r\n  }\r\n\r\n  // 更新模块信息\r\n  async updateModuleInfo(\r\n    mod: ModuleNode,\r\n    importedModules: Set<string | ModuleNode>\r\n  ) {\r\n    const prevImports = mod.importedModules\r\n    for(const curImports of importedModules) {\r\n      const dep = \r\n        typeof curImports === 'string'\r\n        ? await this.ensureEntryFromUrl(curImports)\r\n        : curImports\r\n      if(dep) {\r\n        mod.importedModules.add(dep)\r\n        dep.importers.add(mod)\r\n      }\r\n    }\r\n    // 清除不再引用的依赖\r\n    for(const prevImport of prevImports){\r\n      if(!importedModules.has(prevImport.url)) {\r\n        prevImport.importers.delete(mod)\r\n      }\r\n    }\r\n  }\r\n\r\n  invalidateModule(file: string) {\r\n    const mod = this.idToModuleMap.get(file)\r\n    if(mod) {\r\n      mod.lastHMRTimestamp = Date.now()\r\n      mod.transformResult = null\r\n      mod.importers.forEach((importer) => {\r\n        this.invalidateModule(importer.id! as string)\r\n      })\r\n    }\r\n  }\r\n\r\n}","\r\n\r\nimport connect from 'connect'\r\nimport {red} from 'picocolors'\r\nimport {WebSocketServer, WebSocket} from 'ws'\r\nimport {HMR_PORT} from './constants'\r\n\r\nexport function createWebSocketServer(server: connect.Server): {\r\n  send: (msg: string) => void,\r\n  close: () => void\r\n} {\r\n  let wss: WebSocketServer\r\n  wss = new WebSocketServer({port: HMR_PORT})\r\n  wss.on('connection', (socket) => {\r\n    socket.send(JSON.stringify({type: 'connected'}))\r\n  })\r\n  wss.on('error',(e: Error & {code: string}) => {\r\n    if(e.code !== \"EADDRINUSE\") {\r\n      console.error(red(`WebSocketServer error: ${e.stack||e.message}`))\r\n    }\r\n  })\r\n  return {\r\n    send(payload: Object) {\r\n      const stringified = JSON.stringify(payload)\r\n      wss.clients.forEach((client) => {\r\n        if(client.readyState === WebSocket.OPEN) {\r\n          client.send(stringified)\r\n        }\r\n      })\r\n    },\r\n    close() {\r\n        wss.close()\r\n    },\r\n  }\r\n}","\r\n\r\nimport { ServerContext } from './server'\r\nimport {blue, green} from 'picocolors'\r\nimport {getShortName, normalizePath} from './utils'\r\n\r\nexport function bindingHMREvents(serverContext: ServerContext) {\r\n  const {watcher, ws, root} = serverContext\r\n  watcher.on(\"change\",async (file) => {\r\n    console.log(`✨${blue(\"[hmr]\")} ${green(file)} changed`);\r\n    const {moduleGraph} = serverContext\r\n    // 清除模块依赖图中的缓存\r\n    await moduleGraph.invalidateModule(file)\r\n    // 向客户端发送更新消息\r\n    ws.send({\r\n      type: 'update',\r\n      updates: [\r\n        {\r\n          type: 'js-update',\r\n          timestamp: Date.now(),\r\n          path: '/' + getShortName(normalizePath(file), root),\r\n          acceptPath: '/' + getShortName(normalizePath(file), root),\r\n        }\r\n      ]\r\n    })\r\n  })\r\n}"],"mappings":"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","names":["import_picocolors","import_path","path","build","import_path","import_path","os","path","createDebug","build","resolve","fs","exports","path","path","import_fs_extra","import_esbuild","import_path","path","esbuild","import_es_module_lexer","import_path","MagicString","resolve","id","path","import_resolve","import_path","import_fs_extra","path","resolve","import_fs_extra","import_fs_extra","import_path","path","fs","import_path","import_fs_extra","path","import_debug","debug","createDebug","sirv","import_picocolors","import_picocolors","connect","chokidar","cac"]}