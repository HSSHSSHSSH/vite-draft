{"version":3,"sources":["../src/client/client.ts"],"sourcesContent":["console.log('[vite] connecting....')\r\n\r\n// 创建客户端 websocket 实例\r\nconst socket = new WebSocket('ws://localhost:__HMR_PORT__')\r\n\r\nsocket.addEventListener('message', async ({ data }) => {\r\n  handleMessage(JSON.parse(data)).catch(console.error)\r\n})\r\n\r\nasync function handleMessage(payload: any) {\r\n  console.log('[vite] message received: ', payload)\r\n  switch (payload.type) {\r\n    case 'connected':\r\n      console.log('[vite] connected')\r\n      setInterval(() => {\r\n        socket.send(JSON.stringify({ type: 'ping' }))\r\n      }, 1000)\r\n      break\r\n    case 'update':\r\n      payload.updates.forEach((update: Update) => {\r\n        if (update.type === 'js-update') {\r\n           fetchUpdate(update)\r\n        }\r\n      })\r\n      break\r\n    default:\r\n      break\r\n  }\r\n}\r\n\r\ninterface HotModule {\r\n  id: string\r\n  callbacks: HotCallback[]\r\n}\r\n\r\ninterface HotCallback {\r\n  deps: string[]\r\n  fn: (modules: object[]) => void\r\n}\r\n\r\n// HMR 模块表\r\nconst hotModulesMap = new Map<string, HotModule>()\r\n// 不再生效的模块表\r\nconst pruneMap = new Map<string, (data: any) => void | Promise<void>>()\r\n\r\nexport const createHotContext = (ownerPath: string) => {\r\n  const mod = hotModulesMap.get(ownerPath)\r\n  if (mod) {\r\n    mod.callbacks = []\r\n  }\r\n\r\n  function acceptDeps(deps: string[], callback: any) {\r\n    const mod: HotModule = hotModulesMap.get(ownerPath) || {\r\n      id: ownerPath,\r\n      callbacks: [],\r\n    }\r\n    // callbacks 属性存放 accept 的依赖、依赖改动后对应的回调逻辑\r\n    mod.callbacks.push({\r\n      deps,\r\n      fn: callback,\r\n    })\r\n    hotModulesMap.set(ownerPath, mod)\r\n  }\r\n\r\n  return {\r\n    accept(deps: any, callback?: any) {\r\n      // 这里仅考虑接受自身模块更新的情况\r\n      // import.meta.hot.accept()\r\n      if (typeof deps === 'function' || !deps) {\r\n        // @ts-ignore\r\n        acceptDeps([ownerPath], ([mod]) => deps && deps(mod))\r\n      }\r\n    },\r\n    // 模块不再生效的回调\r\n    // import.meta.hot.prune(() => {})\r\n    prune(cb: (data: any) => void) {\r\n      pruneMap.set(ownerPath, cb)\r\n    },\r\n  }\r\n}\r\n\r\ninterface Update {\r\n  type: 'js-update' | 'css-update'\r\n  path: string\r\n  acceptedPath: string\r\n  timestamp: number\r\n}\r\n\r\nasync function fetchUpdate({ path, timestamp }: Update) {\r\n  const mod = hotModulesMap.get(path);\r\n  if (!mod) return;\r\n\r\n  const moduleMap = new Map();\r\n  const modulesToUpdate = new Set<string>();\r\n  modulesToUpdate.add(path);\r\n\r\n  await Promise.all(  \r\n    Array.from(modulesToUpdate).map(async (dep) => {\r\n      const [path, query] = dep.split(`?`);\r\n      try {\r\n        // 通过动态 import 拉取最新模块\r\n        const newMod = await import(\r\n          path + `?t=${timestamp}${query ? `&${query}` : \"\"}`\r\n        );\r\n        moduleMap.set(dep, newMod);\r\n      } catch (e) {}\r\n    })\r\n  );\r\n\r\n  return () => {\r\n    // 拉取最新模块后执行更新回调\r\n    for (const { deps, fn } of mod.callbacks) {\r\n      fn(deps.map((dep: any) => moduleMap.get(dep)));\r\n    }\r\n    console.log(`[vite] hot updated: ${path}`);\r\n  };\r\n}\r\n\r\n\r\n\r\n// 用于 css 的 HMR\r\nconst sheetsMap = new Map()\r\n\r\nexport function updateStyle(id: string, content: string) {\r\n  let style = sheetsMap.get(id)\r\n  if(!style) {\r\n    // 添加 style 标签\r\n    style = document.createElement('style')\r\n    style.setAttribute('type', 'text/css')\r\n    style.innerHTML = content\r\n    document.head.appendChild(style)\r\n  } else {\r\n    // 更新 style 标签\r\n    style.innerHTML = content\r\n  }\r\n  sheetsMap.set(id, style)\r\n}\r\n\r\n\r\nexport function removeStyle(id: string): void {\r\n  const style = sheetsMap.get(id)\r\n  if(style) {\r\n    style.parentNode.removeChild(style)\r\n  }\r\n  sheetsMap.delete(id)\r\n}\r\n"],"mappings":"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","names":["mod","path"]}